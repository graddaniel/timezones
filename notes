The requirements for the test project are:
*Write an application that shows time in different timezones
User must be able to create an account and log in. (If a mobile application, this means that more users can use the app from the same phone).
When logged in, a user can add timezones, and edit and delete their timezones.
Implement at least three roles with different permission levels: a regular user would only be able to CRUD on their owned records, a user manager would be able to CRUD users, and an admin would be able to CRUD all records and users.
When a timezone is entered, each entry has a Name, Name of the city in timezone, the difference to GMT time.
When displayed, each entry shows the current time in that timezone and the difference between the browser’s time.
Filter by names.
REST/GraphQL API. Make it possible to perform all user actions via the API, including authentication (If a mobile application and you don’t know how to create your own backend you can use Firebase.com or similar services to create the API).
In any case, you should be able to explain how a REST/GraphQL API works and demonstrate that by creating functional tests that use the REST/GraphQL Layer directly. Please be prepared to use REST/GraphQL clients like Postman, cURL, etc. for this purpose.
If it’s a web application, it must be a single-page application. All actions need to be done client-side using AJAX, refreshing the page is not acceptable. (If a mobile application, disregard this).
Functional UI/UX design is needed. You are not required to create a unique design, however, do follow best practices to make the project as functional as possible.
Bonus: unit and e2e tests.

-refactor edit endpoint, to separate user from new data (id based instead of username?)
-pagination
-filter

-e2e tests
-db dump for db provision

-make route and controllers singular and services plural?


last step - finish edit, and add jwt validation and extraction
users actualy should be separated from accounts, because in terms
of SSO or external auth provider, the users would still be needed
while accounts not always

Decisions:
- Routes use singular, services and controllers plural forms,
    because latter are responsible for multiples in general,
    while the former focuses on single units. (maybe controllers not?)

Improvements:
-Put messages into a common file.
-Localization and internationalization